// Generated by CoffeeScript 1.6.3
(function() {
  var EventDispatcher, EventUtils, Main, ParserGIF, init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ParserGIF = (function() {
    var bitToInt, getBitArray;

    function ParserGIF() {}

    ParserGIF.prototype.getNewImage = function() {
      return {
        identifier: '0',
        localPalette: false,
        localPaletteSize: 0,
        interlace: false,
        comments: [],
        text: '',
        left: 0,
        top: 0,
        width: 0,
        height: 0,
        delay: 0,
        disposal: 0
      };
    };

    getBitArray = function(num) {
      var bits, i;
      bits = [];
      i = 7;
      while (i >= 0) {
        bits.push((!!(num & (1 << i)) ? 1 : 0));
        i--;
      }
      return bits;
    };

    ParserGIF.prototype.getDuration = function(duration) {
      return (duration / 100) * 1000;
    };

    ParserGIF.prototype.getPaletteSize = function(palette) {
      return 3 * Math.pow(2, 1 + bitToInt(palette.slice(5, 8)));
    };

    bitToInt = function(bitArray) {
      return bitArray.reduce((function(s, n) {
        return s * 2 + n;
      }), 0);
    };

    ParserGIF.prototype.readSubBlock = function(view, pos, read) {
      var size, subBlock;
      subBlock = {
        data: '',
        size: 0
      };
      while (true) {
        size = view.getUint8(pos + subBlock.size, true);
        if (size === 0) {
          subBlock.size++;
          break;
        }
        if (read) {
          subBlock.data += view.getString(size, pos + subBlock.size + 1);
        }
        subBlock.size += size + 1;
      }
      return subBlock;
    };

    ParserGIF.prototype.getInfo = function(sourceArrayBuffer, quickPass) {
      var block, delay, disposal, globalPaletteSize, image, index, info, length, localPaletteSize, pos, subBlock, type, unpackedField, view;
      pos = 0;
      index = 0;
      unpackedField = null;
      subBlock = null;
      info = {
        valid: false,
        globalPalette: false,
        globalPaletteSize: 0,
        loopCount: 0,
        height: 0,
        width: 0,
        animated: false,
        images: [],
        isBrowserDuration: false,
        duration: 0,
        durationIE: 0,
        durationSafari: 0,
        durationFirefox: 0,
        durationChrome: 0,
        durationOpera: 0
      };
      view = new jDataView(sourceArrayBuffer);
      if (sourceArrayBuffer.byteLength < 10) {
        return info;
      }
      if ((view.getUint16(0) !== 0x4749) || (view.getUint16(2) !== 0x4638)) {
        return info;
      }
      info.height = view.getUint16(6, true);
      info.width = view.getUint16(8, true);
      info.valid = true;
      unpackedField = this.getBitArray(view.getUint8(10, true));
      if (unpackedField[0]) {
        globalPaletteSize = this.getPaletteSize(unpackedField);
        info.globalPalette = true;
        info.globalPaletteSize = globalPaletteSize / 3;
        pos += globalPaletteSize;
      }
      pos += 13;
      image = this.getNewImage();
      while (true) {
        try {
          block = view.getUint8(pos, true);
          switch (block) {
            case 0x21:
              type = view.getUint8(pos + 1, true);
              if (type === 0xF9) {
                length = view.getUint8(pos + 2);
                if (length === 4) {
                  delay = this.getDuration(view.getUint16(pos + 4, true));
                  if (delay < 60 && !info.isBrowserDuration) {
                    info.isBrowserDuration = true;
                  }
                  image.delay = delay;
                  info.duration += delay;
                  info.durationIE += delay < 60 ? defaultDelay : delay;
                  info.durationSafari += delay < 20 ? defaultDelay : delay;
                  info.durationChrome += delay < 20 ? defaultDelay : delay;
                  info.durationFirefox += delay < 20 ? defaultDelay : delay;
                  info.durationOpera += delay < 20 ? defaultDelay : delay;
                  unpackedField = this.getBitArray(view.getUint8(pos + 3));
                  disposal = unpackedField.slice(3, 6).join('');
                  image.disposal = parseInt(disposal, 2);
                  pos += 8;
                } else {
                  pos++;
                }
              } else {
                pos += 2;
                subBlock = this.readSubBlock(view, pos, true);
                switch (type) {
                  case 0xFF:
                    info.loopCount = view.getUint8(pos + 16, true);
                    break;
                  case 0xCE:
                    image.identifier = subBlock.data;
                    break;
                  case 0xFE:
                    image.comments.push(subBlock.data);
                    break;
                  case 0x01:
                    image.text = subBlock.data;
                    break;
                }
                pos += subBlock.size;
              }
              break;
            case 0x2C:
              image.left = view.getUint16(pos + 1, true);
              image.top = view.getUint16(pos + 3, true);
              image.width = view.getUint16(pos + 5, true);
              image.height = view.getUint16(pos + 7, true);
              unpackedField = this.getBitArray(view.getUint8(pos + 9, true));
              if (unpackedField[0]) {
                localPaletteSize = this.getPaletteSize(unpackedField);
                image.localPalette = true;
                image.localPaletteSize = localPaletteSize / 3;
                pos += localPaletteSize;
              }
              if (unpackedField[1]) {
                image.interlace = true;
              }
              info.images.push(image);
              index++;
              image = this.getNewImage();
              image.identifier = index.toString();
              if (info.images.length > 1 && !info.animated) {
                info.animated = true;
                if (quickPass) {
                  return info;
                }
              }
              pos += 11;
              subBlock = this.readSubBlock(view, pos, false);
              pos += subBlock.size;
              break;
            case 0x3B:
              return info;
          }
        } catch (_error) {
          info.valid = false;
          return info;
        }
        if (pos >= sourceArrayBuffer.byteLength) {
          return info;
        }
      }
    };

    return ParserGIF;

  })();

  /* --------------------------------------------
       Begin EventDispatcher.coffee
  --------------------------------------------
  */


  EventDispatcher = (function() {
    function EventDispatcher() {
      this.trigger = __bind(this.trigger, this);
    }

    EventDispatcher.prototype.on = function(evt, handler) {
      if (!this._events) {
        this._events = {};
      }
      if (!this._events[evt]) {
        this._events[evt] = [];
      }
      if (!(__indexOf.call(this._events[evt], handler) >= 0)) {
        return this._events[evt].unshift(handler);
      }
    };

    EventDispatcher.prototype.off = function(evt, handler) {
      var events, i;
      if (evt == null) {
        evt = null;
      }
      if (handler == null) {
        handler = null;
      }
      if (!this._events) {
        this._events = {};
      }
      if (!evt) {
        this._events = {};
        return;
      }
      if (events = this._events[evt]) {
        if (!handler) {
          return this._events[evt].length = 0;
        } else {
          while ((i = events.indexOf(handler)) >= 0) {
            events.splice(i, 1);
          }
          return this._events[evt] = events;
        }
      }
    };

    EventDispatcher.prototype.trigger = function(evt, data) {
      var e, events, i, k, v, _results;
      if (data == null) {
        data = null;
      }
      if (!this._events) {
        this._events = {};
      }
      events = this._events[evt];
      if (!events || events.length === 0) {
        return;
      }
      e = {
        type: evt,
        target: this,
        currentTarget: this
      };
      if (typeof data === 'object') {
        for (k in data) {
          v = data[k];
          if (!e[k]) {
            e[k] = v;
          }
        }
      }
      i = events.length;
      _results = [];
      while (i-- > 0) {
        _results.push(typeof events[i] === "function" ? events[i](e, data) : void 0);
      }
      return _results;
    };

    return EventDispatcher;

  })();

  EventUtils = (function() {
    function EventUtils() {}

    EventUtils.init = function() {
      if (document.addEventListener) {
        this._eventAdder = this._addEventListener;
        return this._eventRemover = this._removeEventListener;
      } else if (document.attachEvent) {
        this._eventAdder = this._attachEvent;
        return this._eventRemover = this._detachEvent;
      } else {
        this._eventAdder = this._callbackFunction;
        return this._eventRemover = this._removeCallbackFunction;
      }
    };

    EventUtils.on = function(target, eventName, callback) {
      return this._eventAdder(target, eventName, callback);
    };

    EventUtils._addEventListener = function(target, eventName, callback) {
      return target.addEventListener(eventName, callback, false);
    };

    EventUtils._attachEvent = function(target, eventName, callback) {
      return target.attachEvent('on' + eventName, callback);
    };

    EventUtils._callbackFunction = function(target, eventName, callback) {
      return target['on' + eventName] = callback;
    };

    EventUtils.off = function(target, eventName, callback) {
      return this._eventRemover(target, eventName, callback);
    };

    EventUtils._removeEventListener = function(target, eventName, callback) {
      return target.removeEventListener(eventName, callback, false);
    };

    EventUtils._detachEvent = function(target, eventName, callback) {
      return target.detachEvent('on' + eventName, callback);
    };

    EventUtils._removeCallbackFunction = function(target, eventName, callback) {
      if (target['on' + eventName] === callback) {
        return target['on' + eventName] = null;
      }
    };

    return EventUtils;

  })();

  EventUtils.init();

  /* --------------------------------------------
       Begin Main.coffee
  --------------------------------------------
  */


  Main = (function(_super) {
    __extends(Main, _super);

    function Main() {
      var _this = this;
      $('<img src="' + 's3Shantae_Goddess_caught.gif' + '">').load(function(e) {
        var image;
        image = e.target;
        return _this._drawImage(image);
      });
    }

    Main.prototype._drawImage = function(image) {
      console.log(image);
      this._drawCanvas = document.createElement('canvas');
      this._drawCanvas.width = 100;
      this._drawCanvas.height = 100;
      this._drawContext = this._drawCanvas.getContext('2d');
      this._drawCanvas.style.position = 'absolute';
      document.body.appendChild(this._drawCanvas);
      this._drawCanvas.width = this.contentWidth = image.width;
      return this._drawCanvas.height = this.contentHeight = image.height;
    };

    return Main;

  })(EventDispatcher);

  init = function() {
    var main;
    return main = new Main();
  };

  $(window).ready(init);

}).call(this);
