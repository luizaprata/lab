// Generated by CoffeeScript 1.6.3
(function() {
  var EventDispatcher, EventUtils, Main, init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventDispatcher = (function() {
    function EventDispatcher() {
      this.trigger = __bind(this.trigger, this);
    }

    EventDispatcher.prototype.on = function(evt, handler) {
      if (!this._events) {
        this._events = {};
      }
      if (!this._events[evt]) {
        this._events[evt] = [];
      }
      if (!(__indexOf.call(this._events[evt], handler) >= 0)) {
        return this._events[evt].unshift(handler);
      }
    };

    EventDispatcher.prototype.off = function(evt, handler) {
      var events, i;
      if (evt == null) {
        evt = null;
      }
      if (handler == null) {
        handler = null;
      }
      if (!this._events) {
        this._events = {};
      }
      if (!evt) {
        this._events = {};
        return;
      }
      if (events = this._events[evt]) {
        if (!handler) {
          return this._events[evt].length = 0;
        } else {
          while ((i = events.indexOf(handler)) >= 0) {
            events.splice(i, 1);
          }
          return this._events[evt] = events;
        }
      }
    };

    EventDispatcher.prototype.trigger = function(evt, data) {
      var e, events, i, k, v, _results;
      if (data == null) {
        data = null;
      }
      if (!this._events) {
        this._events = {};
      }
      events = this._events[evt];
      if (!events || events.length === 0) {
        return;
      }
      e = {
        type: evt,
        target: this,
        currentTarget: this
      };
      if (typeof data === 'object') {
        for (k in data) {
          v = data[k];
          if (!e[k]) {
            e[k] = v;
          }
        }
      }
      i = events.length;
      _results = [];
      while (i-- > 0) {
        _results.push(typeof events[i] === "function" ? events[i](e, data) : void 0);
      }
      return _results;
    };

    return EventDispatcher;

  })();

  EventUtils = (function() {
    function EventUtils() {}

    EventUtils.init = function() {
      if (document.addEventListener) {
        this._eventAdder = this._addEventListener;
        return this._eventRemover = this._removeEventListener;
      } else if (document.attachEvent) {
        this._eventAdder = this._attachEvent;
        return this._eventRemover = this._detachEvent;
      } else {
        this._eventAdder = this._callbackFunction;
        return this._eventRemover = this._removeCallbackFunction;
      }
    };

    EventUtils.on = function(target, eventName, callback) {
      return this._eventAdder(target, eventName, callback);
    };

    EventUtils._addEventListener = function(target, eventName, callback) {
      return target.addEventListener(eventName, callback, false);
    };

    EventUtils._attachEvent = function(target, eventName, callback) {
      return target.attachEvent('on' + eventName, callback);
    };

    EventUtils._callbackFunction = function(target, eventName, callback) {
      return target['on' + eventName] = callback;
    };

    EventUtils.off = function(target, eventName, callback) {
      return this._eventRemover(target, eventName, callback);
    };

    EventUtils._removeEventListener = function(target, eventName, callback) {
      return target.removeEventListener(eventName, callback, false);
    };

    EventUtils._detachEvent = function(target, eventName, callback) {
      return target.detachEvent('on' + eventName, callback);
    };

    EventUtils._removeCallbackFunction = function(target, eventName, callback) {
      if (target['on' + eventName] === callback) {
        return target['on' + eventName] = null;
      }
    };

    return EventUtils;

  })();

  EventUtils.init();

  /* --------------------------------------------
       Begin Main.coffee
  --------------------------------------------
  */


  Main = (function(_super) {
    __extends(Main, _super);

    function Main() {
      this.btn5Click = __bind(this.btn5Click, this);
      this.btn4Click = __bind(this.btn4Click, this);
      this.btn3Click = __bind(this.btn3Click, this);
      this.btn2Click = __bind(this.btn2Click, this);
      this.btn1Click = __bind(this.btn1Click, this);
      this.onLoadText = __bind(this.onLoadText, this);
      $.ajax({
        url: "oldDuke.txt",
        success: this.onLoadText
      });
      this.output = $('.output');
      $("input[name='btn1']").click(this.btn1Click);
      $("input[name='btn2']").click(this.btn2Click);
      $("input[name='btn3']").click(this.btn3Click);
      $("input[name='btn4']").click(this.btn4Click);
      $("input[name='btn5']").click(this.btn5Click);
      $("input[name='btn6']").click(this.btn6Click);
      return false;
    }

    Main.prototype.onLoadText = function(data) {
      return this.oldDukePhrases = data.split("\n");
    };

    Main.prototype.btn1Click = function(e) {
      var phrase, searchDown, searchUP, txt, _i, _len, _ref;
      txt = '';
      _ref = this.oldDukePhrases;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        phrase = _ref[_i];
        searchUP = phrase.search(/up/);
        if (searchUP > -1) {
          txt += 'UP: ' + phrase + '<br/>';
        }
        searchDown = phrase.search(/down/i);
        if (searchDown > -1) {
          txt += 'DOWN: ' + phrase + '<br/>';
        }
      }
      return this.addText(txt);
    };

    Main.prototype.btn2Click = function(e) {
      var i, phrase, txt, _i, _len, _ref;
      txt = '/.a./gi' + '<br/>';
      _ref = this.oldDukePhrases;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        phrase = _ref[i];
        txt += phrase.replace(new RegExp('(.a.)', 'gi'), '<b>$1</b>') + '<br/>';
      }
      return this.addText(txt);
    };

    Main.prototype.btn3Click = function(e) {
      var i, phrase, txt, _i, _len, _ref;
      txt = '/.\\./gi' + '<br/>';
      _ref = this.oldDukePhrases;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        phrase = _ref[i];
        txt += phrase.replace(new RegExp('(.\\.)', 'gi'), '<b>$1</b>') + '<br/>';
      }
      return this.addText(txt);
    };

    Main.prototype.btn4Click = function(e) {
      var i, phrase, txt, _i, _len, _ref;
      txt = '/w[aeiou]/gi' + '<br/>';
      _ref = this.oldDukePhrases;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        phrase = _ref[i];
        txt += phrase.replace(new RegExp('(w[aeiou])', 'gi'), '<b>$1</b>') + '<br/>';
      }
      return this.addText(txt);
    };

    Main.prototype.btn5Click = function(e) {
      var i, phrase, txt, _i, _len, _ref;
      txt = '/[0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9]/g' + '<br/>';
      _ref = this.oldDukePhrases;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        phrase = _ref[i];
        txt += phrase.replace(new RegExp('([0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9])', 'g'), '<b>$1</b>') + '<br/>';
      }
      return this.addText(txt);
    };

    Main.prototype.addText = function(newText) {
      this.output.empty();
      return this.output.append(newText);
    };

    return Main;

  })(EventDispatcher);

  init = function() {
    var main;
    return main = new Main();
  };

  $(window).ready(init);

}).call(this);
