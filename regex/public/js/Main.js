// Generated by CoffeeScript 1.6.3
(function() {
  var EventDispatcher, EventUtils, Main, init,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventDispatcher = (function() {
    function EventDispatcher() {
      this.trigger = __bind(this.trigger, this);
    }

    EventDispatcher.prototype.on = function(evt, handler) {
      if (!this._events) {
        this._events = {};
      }
      if (!this._events[evt]) {
        this._events[evt] = [];
      }
      if (!(__indexOf.call(this._events[evt], handler) >= 0)) {
        return this._events[evt].unshift(handler);
      }
    };

    EventDispatcher.prototype.off = function(evt, handler) {
      var events, i;
      if (evt == null) {
        evt = null;
      }
      if (handler == null) {
        handler = null;
      }
      if (!this._events) {
        this._events = {};
      }
      if (!evt) {
        this._events = {};
        return;
      }
      if (events = this._events[evt]) {
        if (!handler) {
          return this._events[evt].length = 0;
        } else {
          while ((i = events.indexOf(handler)) >= 0) {
            events.splice(i, 1);
          }
          return this._events[evt] = events;
        }
      }
    };

    EventDispatcher.prototype.trigger = function(evt, data) {
      var e, events, i, k, v, _results;
      if (data == null) {
        data = null;
      }
      if (!this._events) {
        this._events = {};
      }
      events = this._events[evt];
      if (!events || events.length === 0) {
        return;
      }
      e = {
        type: evt,
        target: this,
        currentTarget: this
      };
      if (typeof data === 'object') {
        for (k in data) {
          v = data[k];
          if (!e[k]) {
            e[k] = v;
          }
        }
      }
      i = events.length;
      _results = [];
      while (i-- > 0) {
        _results.push(typeof events[i] === "function" ? events[i](e, data) : void 0);
      }
      return _results;
    };

    return EventDispatcher;

  })();

  EventUtils = (function() {
    function EventUtils() {}

    EventUtils.init = function() {
      if (document.addEventListener) {
        this._eventAdder = this._addEventListener;
        return this._eventRemover = this._removeEventListener;
      } else if (document.attachEvent) {
        this._eventAdder = this._attachEvent;
        return this._eventRemover = this._detachEvent;
      } else {
        this._eventAdder = this._callbackFunction;
        return this._eventRemover = this._removeCallbackFunction;
      }
    };

    EventUtils.on = function(target, eventName, callback) {
      return this._eventAdder(target, eventName, callback);
    };

    EventUtils._addEventListener = function(target, eventName, callback) {
      return target.addEventListener(eventName, callback, false);
    };

    EventUtils._attachEvent = function(target, eventName, callback) {
      return target.attachEvent('on' + eventName, callback);
    };

    EventUtils._callbackFunction = function(target, eventName, callback) {
      return target['on' + eventName] = callback;
    };

    EventUtils.off = function(target, eventName, callback) {
      return this._eventRemover(target, eventName, callback);
    };

    EventUtils._removeEventListener = function(target, eventName, callback) {
      return target.removeEventListener(eventName, callback, false);
    };

    EventUtils._detachEvent = function(target, eventName, callback) {
      return target.detachEvent('on' + eventName, callback);
    };

    EventUtils._removeCallbackFunction = function(target, eventName, callback) {
      if (target['on' + eventName] === callback) {
        return target['on' + eventName] = null;
      }
    };

    return EventUtils;

  })();

  EventUtils.init();

  /* --------------------------------------------
       Begin Main.coffee
  --------------------------------------------
  */


  Main = (function(_super) {
    var indice;

    __extends(Main, _super);

    function Main() {
      this.onLoadCSV = __bind(this.onLoadCSV, this);
      this.onLoadNames = __bind(this.onLoadNames, this);
      this.onLoadText = __bind(this.onLoadText, this);
      this.onLoadHtml = __bind(this.onLoadHtml, this);
      this.clickItemButton = __bind(this.clickItemButton, this);
      var i, inputButton, item, _i, _len;
      $.ajax({
        url: "oldDuke.txt",
        success: this.onLoadText
      });
      $.ajax({
        url: "html.txt",
        success: this.onLoadHtml
      });
      $.ajax({
        url: "USPresident.csv",
        success: this.onLoadCSV
      });
      $.ajax({
        url: "nameslist.txt",
        success: this.onLoadNames
      });
      this.output = $('.output');
      this.layout = $('.layout');
      for (i = _i = 0, _len = indice.length; _i < _len; i = ++_i) {
        item = indice[i];
        if (item !== "") {
          inputButton = $("<input type='button' value='" + item + "' name='" + i + "'></input>");
          inputButton.click(this.clickItemButton);
          this.layout.append(inputButton);
        }
      }
      return false;
    }

    Main.prototype.clickItemButton = function(e) {
      var arr, node, oldDukePhrases, phrase, re, searchDown, searchUP, txt, _i, _j, _len, _len1;
      switch (parseInt(e.target.name)) {
        case 1:
          txt = '';
          oldDukePhrases = this.oldDuke.split("\n");
          for (_i = 0, _len = oldDukePhrases.length; _i < _len; _i++) {
            phrase = oldDukePhrases[_i];
            searchUP = phrase.search(/up/);
            if (searchUP > -1) {
              txt += 'UP: ' + phrase + '<br/>';
            }
            searchDown = phrase.search(/down/i);
            if (searchDown > -1) {
              txt += 'DOWN: ' + phrase + '<br/>';
            }
          }
          return this.addText(txt);
        case 2:
          txt = '/.a./gi' + '<br/>';
          re = /(.a.)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 3:
          txt = '/.\\./gi' + '<br/>';
          re = /(\.)/gi;
          txt = this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 4:
          txt = '/w[aeiou]/gi' + '<br/>';
          re = /(w[aeiou])/gi;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 5:
          txt = '/[0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9]/g' + '<br/>';
          re = /([0-9][0-9][0-9].[0-9][0-9][0-9].[0-9][0-9][0-9]-[0-9][0-9])/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 6:
          txt = '/[^a-zA-Z]/g' + '<br/>';
          re = /([^a-zA-Z])/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 7:
          txt = '/\\d*/g' + '<br/>';
          re = /(\d*)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 8:
          txt = '/\\d\\d\\d\\d+/g' + '<br/>';
          re = /(\d\d\d\d+)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 9:
          txt = '/they?/g' + '<br/>';
          re = /(they?)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 10:
          txt = '/the\\w{0,3}/g' + '<br/>';
          re = /(the\w{0,3})/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 11:
          txt = '/\\sthe\\w+?/g' + '<br/>';
          re = /(\bthe\w+?)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 12:
          txt = '/\\b(the)\\w/gi' + '<br/>';
          re = /(\b(the)\w)/ig;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 13:
          txt = '/\\b(the|whe)\\w/gi' + '<br/>';
          re = /(\b(the|whe)\w)/ig;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 14:
          txt = '^[A-Z].+\\.$/gm' + '<br/>';
          re = /(^[A-Z].+\.$)/gm;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 15:
          txt = '\\b\\w+e\\b/g' + '<br/>';
          re = /(\b\w+e\b)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 16:
          txt = '(were)[ \\w]+\\1/g' + '<br/>';
          re = /((were)[ \w]+\2)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 17:
          txt = '<(p|b)>.+?<\\/\\1>' + '<br/>';
          re = /<(p|b)>.+?<\/\1>/g;
          arr = this.html.match(re);
          for (_j = 0, _len1 = arr.length; _j < _len1; _j++) {
            node = arr[_j];
            txt += node;
          }
          return this.addText(txt);
        case 18:
          re = /\s*,\s*/g;
          txt = this.usPresident.replace(re, ',');
          re = /^.+$/m;
          txt = txt.replace(re, 'Number,Last Name,First Name,Took office,Left office,Party,Home State');
          re = /http:\/\/[^,]+,?/g;
          txt = txt.replace(re, '');
          re = /\w+\.(gif|jpg|png),?/g;
          txt = txt.replace(re, '');
          re = /\(.+\)/g;
          txt = txt.replace(re, '');
          re = /^(\d{1,}),([\w .]+) ([\w]+),/gm;
          txt = txt.replace(re, "$1,$3,$2,");
          re = /\d{1,2}\//g;
          txt = txt.replace(re, '');
          this.addText(txt);
          return re = /^.+/;
        case 19:
          txt = '(?:up)([\\w ])+\\1' + '<br/>';
          re = /((?:up)([\w ])+\2)/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 20:
          txt = '\\b[A-Za-z\'\\-]+\\b(?=\\.)\\g' + '<br/>';
          re = /(\b[A-Za-z'\-]+\b(?=\.))/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 21:
          txt = '\\bdown\\b(?!\\.)' + '<br/>';
          re = /(\bdown\b(?!\.))/gi;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 22:
          txt = '[\\u00C0-\\u00FF]\\g' + '<br/>';
          re = /([\u00C0-\u00FF])/g;
          txt += this.oldDuke.replace(re, "<b>$1</b>");
          return this.addText(txt);
        case 23:
          txt = '';
          re = /(^(?:[A-Za-z\u00C0-\u00FF-']+)(?: [A-Za-z\u00C0-\u00FF'-.]+)+$)/gm;
          txt += this.names.replace(re, this.firtsUpperLetterCase);
          return this.addText(txt);
        case 24:
          txt = '';
          re = /(^\d{5}-?\d{3}$)/gm;
          txt += this.oldDuke.replace(re, this.firtsUpperLetterCase);
          return this.addText(txt);
        case 25:
          txt = '';
          re = /(^[\w.%+\-]+@[\w.\-]+\.[A-Za-z]{2,6}$)/gm;
          txt += this.oldDuke.replace(re, this.firtsUpperLetterCase);
          return this.addText(txt);
        case 26:
          txt = '';
          re = /(^https?:\/\/(?:[a-z\d]+\.?)+([A-Za-z\d\/\-,@+.!?=:#&%]+?)?$)/gm;
          txt += this.oldDuke.replace(re, this.firtsUpperLetterCase);
          return this.addText(txt);
      }
    };

    indice = ["", "literal", ".", "\\", "[]", "-", "^", "*", "+", "?", "{}", "lazy", "()", "|", "^ and $", "\\b\\B", "\\1", "html", "csv", "?:", "?=", "?!", "unicode", "names", "cep", "email", "url"];

    Main.prototype.firtsUpperLetterCase = function(text) {
      var re;
      text = text.toLowerCase();
      re = /(^[a-z\u00E0-\u00FC]| [a-z\u00E0-\u00FC])/gm;
      text = text.replace(re, function(firstLetter) {
        return firstLetter.toUpperCase();
      });
      text = text.replace(/('[a-z\u00C0-\u00FF]|-[a-z\u00C0-\u00FF])/g, function(especial) {
        return especial.toUpperCase();
      });
      return text;
    };

    Main.prototype.onLoadHtml = function(data) {
      return this.html = data;
    };

    Main.prototype.onLoadText = function(data) {
      return this.oldDuke = data;
    };

    Main.prototype.onLoadNames = function(data) {
      return this.names = data;
    };

    Main.prototype.onLoadCSV = function(data) {
      return this.usPresident = data;
    };

    Main.prototype.addText = function(newText) {
      var re, txt;
      re = /(\n)/g;
      txt = newText.replace(re, "$1<br/>");
      this.output.empty();
      return this.output.append(txt);
    };

    return Main;

  })(EventDispatcher);

  init = function() {
    var main;
    return main = new Main();
  };

  $(window).ready(init);

}).call(this);
